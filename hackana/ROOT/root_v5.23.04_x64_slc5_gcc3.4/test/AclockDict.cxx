//
// File generated by rootcint at Thu Apr 23 11:09:28 2009

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "AclockDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void Aclock_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_Aclock(void *p = 0);
   static void *newArray_Aclock(Long_t size, void *p);
   static void delete_Aclock(void *p);
   static void deleteArray_Aclock(void *p);
   static void destruct_Aclock(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Aclock*)
   {
      ::Aclock *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Aclock >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Aclock", ::Aclock::Class_Version(), "Aclock.h", 148,
                  typeid(::Aclock), DefineBehavior(ptr, ptr),
                  &::Aclock::Dictionary, isa_proxy, 0,
                  sizeof(::Aclock) );
      instance.SetNew(&new_Aclock);
      instance.SetNewArray(&newArray_Aclock);
      instance.SetDelete(&delete_Aclock);
      instance.SetDeleteArray(&deleteArray_Aclock);
      instance.SetDestructor(&destruct_Aclock);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Aclock*)
   {
      return GenerateInitInstanceLocal((::Aclock*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Aclock*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *Aclock::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Aclock::Class_Name()
{
   return "Aclock";
}

//______________________________________________________________________________
const char *Aclock::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Aclock*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Aclock::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Aclock*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Aclock::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Aclock*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Aclock::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Aclock*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void Aclock::Streamer(TBuffer &R__b)
{
   // Stream an object of class Aclock.

   TTimer::Streamer(R__b);
}

//______________________________________________________________________________
void Aclock::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class Aclock.
      TClass *R__cl = ::Aclock::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fPad", &fPad);
      R__insp.Inspect(R__cl, R__parent, "*fMinuteHand", &fMinuteHand);
      R__insp.Inspect(R__cl, R__parent, "*fHourHand", &fHourHand);
      R__insp.Inspect(R__cl, R__parent, "*fSecondHand", &fSecondHand);
      TTimer::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Aclock(void *p) {
      return  p ? new(p) ::Aclock : new ::Aclock;
   }
   static void *newArray_Aclock(Long_t nElements, void *p) {
      return p ? new(p) ::Aclock[nElements] : new ::Aclock[nElements];
   }
   // Wrapper around operator delete
   static void delete_Aclock(void *p) {
      delete ((::Aclock*)p);
   }
   static void deleteArray_Aclock(void *p) {
      delete [] ((::Aclock*)p);
   }
   static void destruct_Aclock(void *p) {
      typedef ::Aclock current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Aclock

/********************************************************
* AclockDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && (__GNUC__ > 3) && (__GNUC_MINOR__ > 1)
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableAclockDict();

extern "C" void G__set_cpp_environmentAclockDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("Aclock.h");
  G__cpp_reset_tagtableAclockDict();
}
#include <new>
extern "C" int G__cpp_dllrevAclockDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Aclock */
static int G__AclockDict_241_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Aclock* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Aclock((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Aclock((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Aclock[n];
       } else {
         p = new((void*) gvp) Aclock[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Aclock;
       } else {
         p = new((void*) gvp) Aclock;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AclockDictLN_Aclock));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AclockDict_241_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Aclock*) G__getstructoffset())->Animate();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AclockDict_241_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Aclock::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AclockDict_241_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Aclock::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AclockDict_241_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Aclock::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AclockDict_241_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Aclock::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AclockDict_241_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Aclock*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AclockDict_241_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Aclock::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AclockDict_241_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Aclock::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AclockDict_241_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Aclock::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AclockDict_241_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Aclock::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Aclock G__TAclock;
static int G__AclockDict_241_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Aclock*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Aclock*) (soff+(sizeof(Aclock)*i)))->~G__TAclock();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Aclock*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Aclock*) (soff))->~G__TAclock();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Aclock */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncAclockDict {
 public:
  G__Sizep2memfuncAclockDict(): p(&G__Sizep2memfuncAclockDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncAclockDict::*p)();
};

size_t G__get_sizep2memfuncAclockDict()
{
  G__Sizep2memfuncAclockDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceAclockDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AclockDictLN_Aclock))) {
     Aclock *G__Lderived;
     G__Lderived=(Aclock*)0x1000;
     {
       TTimer *G__Lpbase=(TTimer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AclockDictLN_Aclock),G__get_linked_tagnum(&G__AclockDictLN_TTimer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TSysEvtHandler *G__Lpbase=(TSysEvtHandler*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AclockDictLN_Aclock),G__get_linked_tagnum(&G__AclockDictLN_TSysEvtHandler),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AclockDictLN_Aclock),G__get_linked_tagnum(&G__AclockDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TQObject *G__Lpbase=(TQObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AclockDictLN_Aclock),G__get_linked_tagnum(&G__AclockDictLN_TQObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableAclockDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__AclockDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__AclockDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AclockDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__AclockDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AclockDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__AclockDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__AclockDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__AclockDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__AclockDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__AclockDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Aclock */
static void G__setup_memvarAclock(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AclockDictLN_Aclock));
   { Aclock *p; p=(Aclock*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AclockDictLN_TPad),-1,-1,4,"fPad=",0,"pad where this clock is drawn");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AclockDictLN_MinuteHand),-1,-1,4,"fMinuteHand=",0,"minute hand");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AclockDictLN_HourHand),-1,-1,4,"fHourHand=",0,"hour hand");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AclockDictLN_SecondHand),-1,-1,4,"fSecondHand=",0,"second hand");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AclockDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarAclockDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncAclock(void) {
   /* Aclock */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AclockDictLN_Aclock));
   G__memfunc_setup("Aclock",589,G__AclockDict_241_0_1, 105, G__get_linked_tagnum(&G__AclockDictLN_Aclock), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '100' csize", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Notify",633,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Animate",703,G__AclockDict_241_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AclockDict_241_0_5, 85, G__get_linked_tagnum(&G__AclockDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Aclock::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AclockDict_241_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Aclock::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AclockDict_241_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Aclock::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AclockDict_241_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Aclock::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AclockDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AclockDict_241_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AclockDict_241_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Aclock::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AclockDict_241_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Aclock::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AclockDict_241_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Aclock::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AclockDict_241_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Aclock::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~Aclock", 715, G__AclockDict_241_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncAclockDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalAclockDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcAclockDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__AclockDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__AclockDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__AclockDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__AclockDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__AclockDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__AclockDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__AclockDictLN_TTimer = { "TTimer" , 99 , -1 };
G__linked_taginfo G__AclockDictLN_TQObject = { "TQObject" , 99 , -1 };
G__linked_taginfo G__AclockDictLN_TSysEvtHandler = { "TSysEvtHandler" , 99 , -1 };
G__linked_taginfo G__AclockDictLN_TPad = { "TPad" , 99 , -1 };
G__linked_taginfo G__AclockDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__AclockDictLN_MinuteHand = { "MinuteHand" , 99 , -1 };
G__linked_taginfo G__AclockDictLN_HourHand = { "HourHand" , 99 , -1 };
G__linked_taginfo G__AclockDictLN_SecondHand = { "SecondHand" , 99 , -1 };
G__linked_taginfo G__AclockDictLN_Aclock = { "Aclock" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableAclockDict() {
  G__AclockDictLN_TClass.tagnum = -1 ;
  G__AclockDictLN_TBuffer.tagnum = -1 ;
  G__AclockDictLN_TMemberInspector.tagnum = -1 ;
  G__AclockDictLN_TObject.tagnum = -1 ;
  G__AclockDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__AclockDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__AclockDictLN_TTimer.tagnum = -1 ;
  G__AclockDictLN_TQObject.tagnum = -1 ;
  G__AclockDictLN_TSysEvtHandler.tagnum = -1 ;
  G__AclockDictLN_TPad.tagnum = -1 ;
  G__AclockDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__AclockDictLN_MinuteHand.tagnum = -1 ;
  G__AclockDictLN_HourHand.tagnum = -1 ;
  G__AclockDictLN_SecondHand.tagnum = -1 ;
  G__AclockDictLN_Aclock.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableAclockDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__AclockDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__AclockDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__AclockDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__AclockDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__AclockDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__AclockDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__AclockDictLN_TTimer);
   G__get_linked_tagnum_fwd(&G__AclockDictLN_TQObject);
   G__get_linked_tagnum_fwd(&G__AclockDictLN_TSysEvtHandler);
   G__get_linked_tagnum_fwd(&G__AclockDictLN_TPad);
   G__get_linked_tagnum_fwd(&G__AclockDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__AclockDictLN_MinuteHand);
   G__get_linked_tagnum_fwd(&G__AclockDictLN_HourHand);
   G__get_linked_tagnum_fwd(&G__AclockDictLN_SecondHand);
   G__tagtable_setup(G__get_linked_tagnum(&G__AclockDictLN_Aclock),sizeof(Aclock),-1,62720,"analog clock = xclock",G__setup_memvarAclock,G__setup_memfuncAclock);
}
extern "C" void G__cpp_setupAclockDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupAclockDict()");
  G__set_cpp_environmentAclockDict();
  G__cpp_setup_tagtableAclockDict();

  G__cpp_setup_inheritanceAclockDict();

  G__cpp_setup_typetableAclockDict();

  G__cpp_setup_memvarAclockDict();

  G__cpp_setup_memfuncAclockDict();
  G__cpp_setup_globalAclockDict();
  G__cpp_setup_funcAclockDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncAclockDict();
  return;
}
class G__cpp_setup_initAclockDict {
  public:
    G__cpp_setup_initAclockDict() { G__add_setup_func("AclockDict",(G__incsetup)(&G__cpp_setupAclockDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initAclockDict() { G__remove_setup_func("AclockDict"); }
};
G__cpp_setup_initAclockDict G__cpp_setup_initializerAclockDict;

