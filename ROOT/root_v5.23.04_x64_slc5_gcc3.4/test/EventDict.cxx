//
// File generated by rootcint at Thu Apr 23 11:09:14 2009

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "EventDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void Track_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_Track(void *p = 0);
   static void *newArray_Track(Long_t size, void *p);
   static void delete_Track(void *p);
   static void deleteArray_Track(void *p);
   static void destruct_Track(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Track*)
   {
      ::Track *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Track >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Track", ::Track::Class_Version(), "Event.h", 23,
                  typeid(::Track), DefineBehavior(ptr, ptr),
                  &::Track::Dictionary, isa_proxy, 4,
                  sizeof(::Track) );
      instance.SetNew(&new_Track);
      instance.SetNewArray(&newArray_Track);
      instance.SetDelete(&delete_Track);
      instance.SetDeleteArray(&deleteArray_Track);
      instance.SetDestructor(&destruct_Track);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Track*)
   {
      return GenerateInitInstanceLocal((::Track*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Track*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void EventHeader_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_EventHeader(void *p = 0);
   static void *newArray_EventHeader(Long_t size, void *p);
   static void delete_EventHeader(void *p);
   static void deleteArray_EventHeader(void *p);
   static void destruct_EventHeader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::EventHeader*)
   {
      ::EventHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EventHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EventHeader", ::EventHeader::Class_Version(), "Event.h", 81,
                  typeid(::EventHeader), DefineBehavior(ptr, ptr),
                  &::EventHeader::Dictionary, isa_proxy, 4,
                  sizeof(::EventHeader) );
      instance.SetNew(&new_EventHeader);
      instance.SetNewArray(&newArray_EventHeader);
      instance.SetDelete(&delete_EventHeader);
      instance.SetDeleteArray(&deleteArray_EventHeader);
      instance.SetDestructor(&destruct_EventHeader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::EventHeader*)
   {
      return GenerateInitInstanceLocal((::EventHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EventHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Event_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_Event(void *p = 0);
   static void *newArray_Event(Long_t size, void *p);
   static void delete_Event(void *p);
   static void deleteArray_Event(void *p);
   static void destruct_Event(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Event*)
   {
      ::Event *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Event >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Event", ::Event::Class_Version(), "Event.h", 100,
                  typeid(::Event), DefineBehavior(ptr, ptr),
                  &::Event::Dictionary, isa_proxy, 4,
                  sizeof(::Event) );
      instance.SetNew(&new_Event);
      instance.SetNewArray(&newArray_Event);
      instance.SetDelete(&delete_Event);
      instance.SetDeleteArray(&deleteArray_Event);
      instance.SetDestructor(&destruct_Event);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Event*)
   {
      return GenerateInitInstanceLocal((::Event*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Event*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void HistogramManager_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_HistogramManager(void *p);
   static void deleteArray_HistogramManager(void *p);
   static void destruct_HistogramManager(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::HistogramManager*)
   {
      ::HistogramManager *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HistogramManager >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HistogramManager", ::HistogramManager::Class_Version(), "Event.h", 168,
                  typeid(::HistogramManager), DefineBehavior(ptr, ptr),
                  &::HistogramManager::Dictionary, isa_proxy, 4,
                  sizeof(::HistogramManager) );
      instance.SetDelete(&delete_HistogramManager);
      instance.SetDeleteArray(&deleteArray_HistogramManager);
      instance.SetDestructor(&destruct_HistogramManager);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::HistogramManager*)
   {
      return GenerateInitInstanceLocal((::HistogramManager*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HistogramManager*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *Track::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Track::Class_Name()
{
   return "Track";
}

//______________________________________________________________________________
const char *Track::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Track*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Track::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Track*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Track::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Track*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Track::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Track*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *EventHeader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *EventHeader::Class_Name()
{
   return "EventHeader";
}

//______________________________________________________________________________
const char *EventHeader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::EventHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EventHeader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::EventHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EventHeader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::EventHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EventHeader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::EventHeader*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Event::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Event::Class_Name()
{
   return "Event";
}

//______________________________________________________________________________
const char *Event::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Event*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Event::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Event*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Event::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Event*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Event::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Event*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *HistogramManager::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *HistogramManager::Class_Name()
{
   return "HistogramManager";
}

//______________________________________________________________________________
const char *HistogramManager::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::HistogramManager*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HistogramManager::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::HistogramManager*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HistogramManager::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::HistogramManager*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HistogramManager::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::HistogramManager*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void EventHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class EventHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(EventHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(EventHeader::Class(),this);
   }
}

//______________________________________________________________________________
void EventHeader::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class EventHeader.
      TClass *R__cl = ::EventHeader::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fEvtNum", &fEvtNum);
      R__insp.Inspect(R__cl, R__parent, "fRun", &fRun);
      R__insp.Inspect(R__cl, R__parent, "fDate", &fDate);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_EventHeader(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::EventHeader : new ::EventHeader;
   }
   static void *newArray_EventHeader(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::EventHeader[nElements] : new ::EventHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_EventHeader(void *p) {
      delete ((::EventHeader*)p);
   }
   static void deleteArray_EventHeader(void *p) {
      delete [] ((::EventHeader*)p);
   }
   static void destruct_EventHeader(void *p) {
      typedef ::EventHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::EventHeader

//______________________________________________________________________________
void Event::Streamer(TBuffer &R__b)
{
   // Stream an object of class Event.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Event::Class(),this);
   } else {
      R__b.WriteClassBuffer(Event::Class(),this);
   }
}

//______________________________________________________________________________
void Event::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class Event.
      TClass *R__cl = ::Event::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fType[20]", fType);
      R__insp.Inspect(R__cl, R__parent, "*fEventName", &fEventName);
      R__insp.Inspect(R__cl, R__parent, "fNtrack", &fNtrack);
      R__insp.Inspect(R__cl, R__parent, "fNseg", &fNseg);
      R__insp.Inspect(R__cl, R__parent, "fNvertex", &fNvertex);
      R__insp.Inspect(R__cl, R__parent, "fFlag", &fFlag);
      R__insp.Inspect(R__cl, R__parent, "fTemperature", &fTemperature);
      R__insp.Inspect(R__cl, R__parent, "fMeasures[10]", fMeasures);
      R__insp.Inspect(R__cl, R__parent, "fMatrix[4][4]", fMatrix);
      R__insp.Inspect(R__cl, R__parent, "*fClosestDistance", &fClosestDistance);
      R__insp.Inspect(R__cl, R__parent, "fEvtHdr", &fEvtHdr);
      fEvtHdr.ShowMembers(R__insp, strcat(R__parent,"fEvtHdr.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*fTracks", &fTracks);
      R__insp.Inspect(R__cl, R__parent, "*fHighPt", &fHighPt);
      R__insp.Inspect(R__cl, R__parent, "*fMuons", &fMuons);
      R__insp.Inspect(R__cl, R__parent, "fLastTrack", &fLastTrack);
      fLastTrack.ShowMembers(R__insp, strcat(R__parent,"fLastTrack.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fWebHistogram", &fWebHistogram);
      fWebHistogram.ShowMembers(R__insp, strcat(R__parent,"fWebHistogram.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*fH", &fH);
      R__insp.Inspect(R__cl, R__parent, "fTriggerBits", &fTriggerBits);
      fTriggerBits.ShowMembers(R__insp, strcat(R__parent,"fTriggerBits.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fIsValid", &fIsValid);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Event(void *p) {
      return  p ? new(p) ::Event : new ::Event;
   }
   static void *newArray_Event(Long_t nElements, void *p) {
      return p ? new(p) ::Event[nElements] : new ::Event[nElements];
   }
   // Wrapper around operator delete
   static void delete_Event(void *p) {
      delete ((::Event*)p);
   }
   static void deleteArray_Event(void *p) {
      delete [] ((::Event*)p);
   }
   static void destruct_Event(void *p) {
      typedef ::Event current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Event

//______________________________________________________________________________
void HistogramManager::Streamer(TBuffer &R__b)
{
   // Stream an object of class HistogramManager.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(HistogramManager::Class(),this);
   } else {
      R__b.WriteClassBuffer(HistogramManager::Class(),this);
   }
}

//______________________________________________________________________________
void HistogramManager::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class HistogramManager.
      TClass *R__cl = ::HistogramManager::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fNtrack", &fNtrack);
      R__insp.Inspect(R__cl, R__parent, "*fNseg", &fNseg);
      R__insp.Inspect(R__cl, R__parent, "*fTemperature", &fTemperature);
      R__insp.Inspect(R__cl, R__parent, "*fPx", &fPx);
      R__insp.Inspect(R__cl, R__parent, "*fPy", &fPy);
      R__insp.Inspect(R__cl, R__parent, "*fPz", &fPz);
      R__insp.Inspect(R__cl, R__parent, "*fRandom", &fRandom);
      R__insp.Inspect(R__cl, R__parent, "*fMass2", &fMass2);
      R__insp.Inspect(R__cl, R__parent, "*fBx", &fBx);
      R__insp.Inspect(R__cl, R__parent, "*fBy", &fBy);
      R__insp.Inspect(R__cl, R__parent, "*fMeanCharge", &fMeanCharge);
      R__insp.Inspect(R__cl, R__parent, "*fXfirst", &fXfirst);
      R__insp.Inspect(R__cl, R__parent, "*fXlast", &fXlast);
      R__insp.Inspect(R__cl, R__parent, "*fYfirst", &fYfirst);
      R__insp.Inspect(R__cl, R__parent, "*fYlast", &fYlast);
      R__insp.Inspect(R__cl, R__parent, "*fZfirst", &fZfirst);
      R__insp.Inspect(R__cl, R__parent, "*fZlast", &fZlast);
      R__insp.Inspect(R__cl, R__parent, "*fCharge", &fCharge);
      R__insp.Inspect(R__cl, R__parent, "*fNpoint", &fNpoint);
      R__insp.Inspect(R__cl, R__parent, "*fValid", &fValid);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_HistogramManager(void *p) {
      delete ((::HistogramManager*)p);
   }
   static void deleteArray_HistogramManager(void *p) {
      delete [] ((::HistogramManager*)p);
   }
   static void destruct_HistogramManager(void *p) {
      typedef ::HistogramManager current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::HistogramManager

//______________________________________________________________________________
void Track::Streamer(TBuffer &R__b)
{
   // Stream an object of class Track.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Track::Class(),this);
   } else {
      R__b.WriteClassBuffer(Track::Class(),this);
   }
}

//______________________________________________________________________________
void Track::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class Track.
      TClass *R__cl = ::Track::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fPx", &fPx);
      R__insp.Inspect(R__cl, R__parent, "fPy", &fPy);
      R__insp.Inspect(R__cl, R__parent, "fPz", &fPz);
      R__insp.Inspect(R__cl, R__parent, "fRandom", &fRandom);
      R__insp.Inspect(R__cl, R__parent, "fMass2", &fMass2);
      R__insp.Inspect(R__cl, R__parent, "fBx", &fBx);
      R__insp.Inspect(R__cl, R__parent, "fBy", &fBy);
      R__insp.Inspect(R__cl, R__parent, "fMeanCharge", &fMeanCharge);
      R__insp.Inspect(R__cl, R__parent, "fXfirst", &fXfirst);
      R__insp.Inspect(R__cl, R__parent, "fXlast", &fXlast);
      R__insp.Inspect(R__cl, R__parent, "fYfirst", &fYfirst);
      R__insp.Inspect(R__cl, R__parent, "fYlast", &fYlast);
      R__insp.Inspect(R__cl, R__parent, "fZfirst", &fZfirst);
      R__insp.Inspect(R__cl, R__parent, "fZlast", &fZlast);
      R__insp.Inspect(R__cl, R__parent, "fCharge", &fCharge);
      R__insp.Inspect(R__cl, R__parent, "fVertex[3]", fVertex);
      R__insp.Inspect(R__cl, R__parent, "fNpoint", &fNpoint);
      R__insp.Inspect(R__cl, R__parent, "fValid", &fValid);
      R__insp.Inspect(R__cl, R__parent, "fNsp", &fNsp);
      R__insp.Inspect(R__cl, R__parent, "*fPointValue", &fPointValue);
      R__insp.Inspect(R__cl, R__parent, "fTriggerBits", &fTriggerBits);
      fTriggerBits.ShowMembers(R__insp, strcat(R__parent,"fTriggerBits.")); R__parent[R__ncp] = 0;
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Track(void *p) {
      return  p ? new(p) ::Track : new ::Track;
   }
   static void *newArray_Track(Long_t nElements, void *p) {
      return p ? new(p) ::Track[nElements] : new ::Track[nElements];
   }
   // Wrapper around operator delete
   static void delete_Track(void *p) {
      delete ((::Track*)p);
   }
   static void deleteArray_Track(void *p) {
      delete [] ((::Track*)p);
   }
   static void destruct_Track(void *p) {
      typedef ::Track current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Track

/********************************************************
* EventDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && (__GNUC__ > 3) && (__GNUC_MINOR__ > 1)
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableEventDict();

extern "C" void G__set_cpp_environmentEventDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("Event.h");
  G__cpp_reset_tagtableEventDict();
}
#include <new>
extern "C" int G__cpp_dllrevEventDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Track */
static int G__EventDict_204_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Track* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Track[n];
     } else {
       p = new((void*) gvp) Track[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Track;
     } else {
       p = new((void*) gvp) Track;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EventDictLN_Track));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Track* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Track(*(Track*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Track(*(Track*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EventDictLN_Track));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Track* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Track((Float_t) G__double(libp->para[0]));
   } else {
     p = new((void*) gvp) Track((Float_t) G__double(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EventDictLN_Track));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const Track*) G__getstructoffset())->GetPx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const Track*) G__getstructoffset())->GetPy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const Track*) G__getstructoffset())->GetPz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const Track*) G__getstructoffset())->GetPt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const Track*) G__getstructoffset())->GetRandom());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const Track*) G__getstructoffset())->GetBx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const Track*) G__getstructoffset())->GetBy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const Track*) G__getstructoffset())->GetMass2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const Track*) G__getstructoffset())->GetMeanCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const Track*) G__getstructoffset())->GetXfirst());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const Track*) G__getstructoffset())->GetXlast());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const Track*) G__getstructoffset())->GetYfirst());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const Track*) G__getstructoffset())->GetYlast());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const Track*) G__getstructoffset())->GetZfirst());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const Track*) G__getstructoffset())->GetZlast());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Track*) G__getstructoffset())->GetCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((Track*) G__getstructoffset())->GetVertex((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((Track*) G__getstructoffset())->GetVertex());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Track*) G__getstructoffset())->GetNpoint());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TBits& obj = ((Track*) G__getstructoffset())->GetTriggerBits();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const Track*) G__getstructoffset())->GetValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((Track*) G__getstructoffset())->SetValid((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((Track*) G__getstructoffset())->SetValid();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Track*) G__getstructoffset())->GetN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((const Track*) G__getstructoffset())->GetPointValue((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((const Track*) G__getstructoffset())->GetPointValue());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Track::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Track::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Track::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Track::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Track*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Track::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Track::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Track::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_204_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Track::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Track G__TTrack;
static int G__EventDict_204_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Track*) (soff+(sizeof(Track)*i)))->~G__TTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Track*) (soff))->~G__TTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EventDict_204_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Track* dest = (Track*) G__getstructoffset();
   *dest = *(Track*) libp->para[0].ref;
   const Track& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EventHeader */
static int G__EventDict_205_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EventHeader[n];
     } else {
       p = new((void*) gvp) EventHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EventHeader;
     } else {
       p = new((void*) gvp) EventHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EventDictLN_EventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_205_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EventHeader*) G__getstructoffset())->Set((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_205_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EventHeader*) G__getstructoffset())->GetEvtNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_205_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EventHeader*) G__getstructoffset())->GetRun());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_205_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const EventHeader*) G__getstructoffset())->GetDate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_205_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EventHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_205_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EventHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_205_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EventHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_205_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EventHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_205_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const EventHeader*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_205_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EventHeader*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_205_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EventHeader*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_205_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EventHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_205_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EventHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_205_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EventHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_205_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EventHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_205_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EventHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EventDict_205_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EventHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EventHeader(*(EventHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EventDictLN_EventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EventHeader G__TEventHeader;
static int G__EventDict_205_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EventHeader*) (soff+(sizeof(EventHeader)*i)))->~G__TEventHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EventHeader*) (soff))->~G__TEventHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EventDict_205_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EventHeader* dest = (EventHeader*) G__getstructoffset();
   *dest = *(EventHeader*) libp->para[0].ref;
   const EventHeader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Event */
static int G__EventDict_206_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Event* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Event[n];
     } else {
       p = new((void*) gvp) Event[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Event;
     } else {
       p = new((void*) gvp) Event;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EventDictLN_Event));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((Event*) G__getstructoffset())->Build((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((Event*) G__getstructoffset())->Build((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((Event*) G__getstructoffset())->Build((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Event*) G__getstructoffset())->IsValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      Event::Reset((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      Event::Reset();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Event*) G__getstructoffset())->ResetHistogramPointer();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Event*) G__getstructoffset())->SetNseg((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Event*) G__getstructoffset())->SetNtrack((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Event*) G__getstructoffset())->SetNvertex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Event*) G__getstructoffset())->SetFlag((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Event*) G__getstructoffset())->SetTemperature((Double32_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Event*) G__getstructoffset())->SetType((char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Event*) G__getstructoffset())->SetHeader((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((Event*) G__getstructoffset())->AddTrack((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((Event*) G__getstructoffset())->AddTrack((Float_t) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Event*) G__getstructoffset())->SetMeasure((UChar_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Event*) G__getstructoffset())->SetMatrix((UChar_t) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1])
, (Double32_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Event*) G__getstructoffset())->SetRandomVertex();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Event*) G__getstructoffset())->GetClosestDistance((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((Event*) G__getstructoffset())->GetType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Event*) G__getstructoffset())->GetNtrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Event*) G__getstructoffset())->GetNseg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Event*) G__getstructoffset())->GetNvertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const Event*) G__getstructoffset())->GetFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Event*) G__getstructoffset())->GetTemperature());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Event*) G__getstructoffset())->GetHeader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Event*) G__getstructoffset())->GetTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Event*) G__getstructoffset())->GetHighPt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Event*) G__getstructoffset())->GetMuons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Event*) G__getstructoffset())->GetLastTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Event*) G__getstructoffset())->GetHistogram());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Event*) G__getstructoffset())->GetWebHistogram());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Event*) G__getstructoffset())->GetMeasure((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Event*) G__getstructoffset())->GetMatrix((UChar_t) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TBits& obj = ((Event*) G__getstructoffset())->GetTriggerBits();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Event::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Event::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Event::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Event::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Event*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Event::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Event::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Event::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_206_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Event::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EventDict_206_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Event* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Event(*(Event*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EventDictLN_Event));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Event G__TEvent;
static int G__EventDict_206_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Event*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Event*) (soff+(sizeof(Event)*i)))->~G__TEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Event*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Event*) (soff))->~G__TEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EventDict_206_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Event* dest = (Event*) G__getstructoffset();
   *dest = *(Event*) libp->para[0].ref;
   const Event& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HistogramManager */
static int G__EventDict_207_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HistogramManager* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HistogramManager((TDirectory*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HistogramManager((TDirectory*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EventDictLN_HistogramManager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_207_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistogramManager*) G__getstructoffset())->Hfill((Event*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_207_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HistogramManager::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_207_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HistogramManager::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_207_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HistogramManager::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_207_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HistogramManager::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_207_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HistogramManager*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_207_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistogramManager*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_207_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistogramManager*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_207_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistogramManager*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_207_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HistogramManager::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_207_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HistogramManager::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_207_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HistogramManager::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventDict_207_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HistogramManager::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EventDict_207_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HistogramManager* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HistogramManager(*(HistogramManager*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EventDictLN_HistogramManager));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HistogramManager G__THistogramManager;
static int G__EventDict_207_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HistogramManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HistogramManager*) (soff+(sizeof(HistogramManager)*i)))->~G__THistogramManager();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HistogramManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HistogramManager*) (soff))->~G__THistogramManager();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EventDict_207_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HistogramManager* dest = (HistogramManager*) G__getstructoffset();
   *dest = *(HistogramManager*) libp->para[0].ref;
   const HistogramManager& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Track */

/* EventHeader */

/* Event */

/* HistogramManager */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncEventDict {
 public:
  G__Sizep2memfuncEventDict(): p(&G__Sizep2memfuncEventDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncEventDict::*p)();
};

size_t G__get_sizep2memfuncEventDict()
{
  G__Sizep2memfuncEventDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceEventDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EventDictLN_Track))) {
     Track *G__Lderived;
     G__Lderived=(Track*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EventDictLN_Track),G__get_linked_tagnum(&G__EventDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EventDictLN_Event))) {
     Event *G__Lderived;
     G__Lderived=(Event*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EventDictLN_Event),G__get_linked_tagnum(&G__EventDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableEventDict() {

   /* Setting up typedef entry */
   G__search_typename2("UChar_t",98,-1,0,-1);
   G__setnewtype(-1,"Unsigned Character 1 byte (unsigned char)",0);
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double32_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes in memory, written as a 4 bytes float",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__EventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__EventDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__EventDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__EventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__EventDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__EventDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__EventDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__EventDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__EventDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__EventDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Track */
static void G__setup_memvarTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EventDictLN_Track));
   { Track *p; p=(Track*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPx=",0,"X component of the momentum");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPy=",0,"Y component of the momentum");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPz=",0,"Z component of the momentum");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRandom=",0,"A random track quantity");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float16_t"),-1,4,"fMass2=",0,"[0,0,8] The mass square of this particle");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float16_t"),-1,4,"fBx=",0,"[0,0,10] X intercept at the vertex");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float16_t"),-1,4,"fBy=",0,"[0,0,10] Y intercept at the vertex");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanCharge=",0,"Mean charge deposition of all hits of this track");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float16_t"),-1,4,"fXfirst=",0,"X coordinate of the first point");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float16_t"),-1,4,"fXlast=",0,"X coordinate of the last point");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float16_t"),-1,4,"fYfirst=",0,"Y coordinate of the first point");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float16_t"),-1,4,"fYlast=",0,"Y coordinate of the last point");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float16_t"),-1,4,"fZfirst=",0,"Z coordinate of the first point");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float16_t"),-1,4,"fZlast=",0,"Z coordinate of the last point");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fCharge=",0,"[-1,1,2] Charge of this track");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fVertex[3]=",0,"[-30,30,16] Track vertex position");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNpoint=",0,"Number of points for this track");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fValid=",0,"Validity criterion");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNsp=",0,"Number of points for this track with a special value");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fPointValue=",0,"[fNsp][0,3] a special quantity for some point.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EventDictLN_TBits),-1,-1,4,"fTriggerBits=",0,"Bits triggered by this track.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EventHeader */
static void G__setup_memvarEventHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EventDictLN_EventHeader));
   { EventHeader *p; p=(EventHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEvtNum=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRun=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fDate=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Event */
static void G__setup_memvarEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EventDictLN_Event));
   { Event *p; p=(Event*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,-1,-1,4,"fType[20]=",0,"event type");
   G__memvar_setup((void*)0,67,0,0,-1,-1,-1,4,"fEventName=",0,"run+event number in character format");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNtrack=",0,"Number of tracks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNseg=",0,"Number of track segments");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNvertex=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fFlag=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fTemperature=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMeasures[10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fMatrix[4][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fClosestDistance=",0,"[fNvertex][0,0,6]");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EventDictLN_EventHeader),-1,-1,4,"fEvtHdr=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TClonesArray),-1,-1,4,"fTracks=",0,"->array with all tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TRefArray),-1,-1,4,"fHighPt=",0,"array of High Pt tracks only");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TRefArray),-1,-1,4,"fMuons=",0,"array of Muon tracks only");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EventDictLN_TRef),-1,-1,4,"fLastTrack=",0,"reference pointer to last track");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EventDictLN_TRef),-1,-1,4,"fWebHistogram=",0,"EXEC:GetWebHistogram reference to an histogram in a TWebFile");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fH=",0,"->");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EventDictLN_TBits),-1,-1,4,"fTriggerBits=",0,"Bits triggered by this event.");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsValid=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TClonesArray),-1,-2,4,"fgTracks=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-2,4,"fgHist=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HistogramManager */
static void G__setup_memvarHistogramManager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EventDictLN_HistogramManager));
   { HistogramManager *p; p=(HistogramManager*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fNtrack=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fNseg=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fTemperature=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fPx=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fPy=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fPz=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fRandom=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fMass2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fBx=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fBy=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fMeanCharge=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fXfirst=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fXlast=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fYfirst=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fYlast=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fZfirst=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fZlast=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fCharge=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fNpoint=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fValid=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarEventDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTrack(void) {
   /* Track */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EventDictLN_Track));
   G__memfunc_setup("Track",501,G__EventDict_204_0_1, 105, G__get_linked_tagnum(&G__EventDictLN_Track), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Track",501,G__EventDict_204_0_2, 105, G__get_linked_tagnum(&G__EventDictLN_Track), -1, 0, 1, 1, 1, 0, "u 'Track' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Track",501,G__EventDict_204_0_3, 105, G__get_linked_tagnum(&G__EventDictLN_Track), -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - random", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPx",488,G__EventDict_204_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPy",489,G__EventDict_204_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPz",490,G__EventDict_204_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPt",484,G__EventDict_204_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRandom",897,G__EventDict_204_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBx",474,G__EventDict_204_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBy",475,G__EventDict_204_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMass2",742,G__EventDict_204_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeanCharge",1259,G__EventDict_204_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXfirst",928,G__EventDict_204_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXlast",812,G__EventDict_204_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYfirst",929,G__EventDict_204_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYlast",813,G__EventDict_204_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZfirst",930,G__EventDict_204_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZlast",814,G__EventDict_204_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCharge",874,G__EventDict_204_0_20, 100, -1, G__defined_typename("Double32_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVertex",926,G__EventDict_204_0_21, 100, -1, G__defined_typename("Double32_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNpoint",920,G__EventDict_204_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerBits",1414,G__EventDict_204_0_23, 117, G__get_linked_tagnum(&G__EventDictLN_TBits), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetValid",784,G__EventDict_204_0_24, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetValid",796,G__EventDict_204_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1' valid", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetN",366,G__EventDict_204_0_26, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPointValue",1319,G__EventDict_204_0_27, 100, -1, G__defined_typename("Double32_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '0' i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EventDict_204_0_28, 85, G__get_linked_tagnum(&G__EventDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Track::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EventDict_204_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Track::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EventDict_204_0_30, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Track::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EventDict_204_0_31, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Track::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EventDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EventDict_204_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EventDict_204_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Track::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EventDict_204_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Track::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EventDict_204_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Track::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EventDict_204_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Track::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~Track", 627, G__EventDict_204_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EventDict_204_0_41, (int) ('u'), G__get_linked_tagnum(&G__EventDictLN_Track), -1, 1, 1, 1, 1, 0, "u 'Track' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEventHeader(void) {
   /* EventHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EventDictLN_EventHeader));
   G__memfunc_setup("EventHeader",1099,G__EventDict_205_0_1, 105, G__get_linked_tagnum(&G__EventDictLN_EventHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__EventDict_205_0_2, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - r "
"i - 'Int_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEvtNum",895,G__EventDict_205_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRun",597,G__EventDict_205_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDate",670,G__EventDict_205_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EventDict_205_0_6, 85, G__get_linked_tagnum(&G__EventDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EventHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EventDict_205_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EventHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EventDict_205_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EventHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EventDict_205_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EventHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__EventDict_205_0_10, 85, G__get_linked_tagnum(&G__EventDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__EventDict_205_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__EventDict_205_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EventDict_205_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EventDict_205_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EventHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EventDict_205_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EventHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EventDict_205_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EventHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EventDict_205_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EventHeader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EventHeader", 1099, G__EventDict_205_0_18, (int) ('i'), G__get_linked_tagnum(&G__EventDictLN_EventHeader), -1, 0, 1, 1, 1, 0, "u 'EventHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EventHeader", 1225, G__EventDict_205_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EventDict_205_0_20, (int) ('u'), G__get_linked_tagnum(&G__EventDictLN_EventHeader), -1, 1, 1, 1, 1, 0, "u 'EventHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEvent(void) {
   /* Event */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EventDictLN_Event));
   G__memfunc_setup("Event",514,G__EventDict_206_0_1, 105, G__get_linked_tagnum(&G__EventDictLN_Event), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Build",496,G__EventDict_206_0_2, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - ev i - 'Int_t' 0 '600' arg5 "
"f - 'Float_t' 0 '1' ptmin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsValid",684,G__EventDict_206_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__EventDict_206_0_5, 121, -1, -1, 0, 1, 3, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) G__func2void( (void (*)(Option_t*))(&Event::Reset) ), 0);
   G__memfunc_setup("ResetHistogramPointer",2194,G__EventDict_206_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNseg",697,G__EventDict_206_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNtrack",911,G__EventDict_206_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNvertex",1048,G__EventDict_206_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFlag",678,G__EventDict_206_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTemperature",1466,G__EventDict_206_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double32_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetType",718,G__EventDict_206_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHeader",885,G__EventDict_206_0_13, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - run "
"i - 'Int_t' 0 - date f - 'Float_t' 0 - random", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrack",766,G__EventDict_206_0_14, 85, G__get_linked_tagnum(&G__EventDictLN_Track), -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - random f - 'Float_t' 0 '1' ptmin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMeasure",1022,G__EventDict_206_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"b - 'UChar_t' 0 - which i - 'Int_t' 0 - what", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMatrix",929,G__EventDict_206_0_16, 121, -1, -1, 0, 3, 1, 1, 0, 
"b - 'UChar_t' 0 - x b - 'UChar_t' 0 - y "
"d - 'Double32_t' 0 - what", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRandomVertex",1547,G__EventDict_206_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClosestDistance",1832,G__EventDict_206_0_18, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetType",706,G__EventDict_206_0_19, 67, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNtrack",899,G__EventDict_206_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNseg",685,G__EventDict_206_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNvertex",1036,G__EventDict_206_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFlag",666,G__EventDict_206_0_23, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTemperature",1454,G__EventDict_206_0_24, 100, -1, G__defined_typename("Double32_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHeader",873,G__EventDict_206_0_25, 85, G__get_linked_tagnum(&G__EventDictLN_EventHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTracks",904,G__EventDict_206_0_26, 85, G__get_linked_tagnum(&G__EventDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHighPt",868,G__EventDict_206_0_27, 85, G__get_linked_tagnum(&G__EventDictLN_TRefArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMuons",818,G__EventDict_206_0_28, 85, G__get_linked_tagnum(&G__EventDictLN_TRefArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLastTrack",1193,G__EventDict_206_0_29, 85, G__get_linked_tagnum(&G__EventDictLN_Track), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistogram",1230,G__EventDict_206_0_30, 85, G__get_linked_tagnum(&G__EventDictLN_TH1F), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWebHistogram",1516,G__EventDict_206_0_31, 85, G__get_linked_tagnum(&G__EventDictLN_TH1), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeasure",1010,G__EventDict_206_0_32, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - which", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMatrix",917,G__EventDict_206_0_33, 100, -1, G__defined_typename("Double32_t"), 0, 2, 1, 1, 0, 
"b - 'UChar_t' 0 - x b - 'UChar_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerBits",1414,G__EventDict_206_0_34, 117, G__get_linked_tagnum(&G__EventDictLN_TBits), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EventDict_206_0_35, 85, G__get_linked_tagnum(&G__EventDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Event::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EventDict_206_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Event::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EventDict_206_0_37, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Event::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EventDict_206_0_38, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Event::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EventDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EventDict_206_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EventDict_206_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Event::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EventDict_206_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Event::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EventDict_206_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Event::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EventDict_206_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Event::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Event", 514, G__EventDict_206_0_47, (int) ('i'), G__get_linked_tagnum(&G__EventDictLN_Event), -1, 0, 1, 1, 1, 0, "u 'Event' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Event", 640, G__EventDict_206_0_48, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EventDict_206_0_49, (int) ('u'), G__get_linked_tagnum(&G__EventDictLN_Event), -1, 1, 1, 1, 1, 0, "u 'Event' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHistogramManager(void) {
   /* HistogramManager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EventDictLN_HistogramManager));
   G__memfunc_setup("HistogramManager",1641,G__EventDict_207_0_1, 105, G__get_linked_tagnum(&G__EventDictLN_HistogramManager), -1, 0, 1, 1, 1, 0, "U 'TDirectory' - 0 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Hfill",495,G__EventDict_207_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'Event' - 0 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EventDict_207_0_3, 85, G__get_linked_tagnum(&G__EventDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HistogramManager::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EventDict_207_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HistogramManager::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EventDict_207_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HistogramManager::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EventDict_207_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HistogramManager::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__EventDict_207_0_7, 85, G__get_linked_tagnum(&G__EventDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__EventDict_207_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__EventDict_207_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EventDict_207_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EventDict_207_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HistogramManager::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EventDict_207_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HistogramManager::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EventDict_207_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HistogramManager::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EventDict_207_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HistogramManager::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HistogramManager", 1641, G__EventDict_207_0_15, (int) ('i'), G__get_linked_tagnum(&G__EventDictLN_HistogramManager), -1, 0, 1, 1, 1, 0, "u 'HistogramManager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HistogramManager", 1767, G__EventDict_207_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EventDict_207_0_17, (int) ('u'), G__get_linked_tagnum(&G__EventDictLN_HistogramManager), -1, 1, 1, 1, 1, 0, "u 'HistogramManager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncEventDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalEventDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcEventDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__EventDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__EventDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__EventDictLN_TDirectory = { "TDirectory" , 99 , -1 };
G__linked_taginfo G__EventDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__EventDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__EventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__EventDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__EventDictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__EventDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__EventDictLN_TRefArray = { "TRefArray" , 99 , -1 };
G__linked_taginfo G__EventDictLN_TRef = { "TRef" , 99 , -1 };
G__linked_taginfo G__EventDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__EventDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__EventDictLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__EventDictLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__EventDictLN_TBits = { "TBits" , 99 , -1 };
G__linked_taginfo G__EventDictLN_Track = { "Track" , 99 , -1 };
G__linked_taginfo G__EventDictLN_EventHeader = { "EventHeader" , 99 , -1 };
G__linked_taginfo G__EventDictLN_Event = { "Event" , 99 , -1 };
G__linked_taginfo G__EventDictLN_HistogramManager = { "HistogramManager" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableEventDict() {
  G__EventDictLN_TClass.tagnum = -1 ;
  G__EventDictLN_TBuffer.tagnum = -1 ;
  G__EventDictLN_TDirectory.tagnum = -1 ;
  G__EventDictLN_TMemberInspector.tagnum = -1 ;
  G__EventDictLN_TObject.tagnum = -1 ;
  G__EventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__EventDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__EventDictLN_TClonesArray.tagnum = -1 ;
  G__EventDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__EventDictLN_TRefArray.tagnum = -1 ;
  G__EventDictLN_TRef.tagnum = -1 ;
  G__EventDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__EventDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__EventDictLN_TH1.tagnum = -1 ;
  G__EventDictLN_TH1F.tagnum = -1 ;
  G__EventDictLN_TBits.tagnum = -1 ;
  G__EventDictLN_Track.tagnum = -1 ;
  G__EventDictLN_EventHeader.tagnum = -1 ;
  G__EventDictLN_Event.tagnum = -1 ;
  G__EventDictLN_HistogramManager.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableEventDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__EventDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__EventDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__EventDictLN_TDirectory);
   G__get_linked_tagnum_fwd(&G__EventDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__EventDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__EventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__EventDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__EventDictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__EventDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__EventDictLN_TRefArray);
   G__get_linked_tagnum_fwd(&G__EventDictLN_TRef);
   G__get_linked_tagnum_fwd(&G__EventDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__EventDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__EventDictLN_TH1);
   G__get_linked_tagnum_fwd(&G__EventDictLN_TH1F);
   G__get_linked_tagnum_fwd(&G__EventDictLN_TBits);
   G__tagtable_setup(G__get_linked_tagnum(&G__EventDictLN_Track),sizeof(Track),-1,325376,"A track segment",G__setup_memvarTrack,G__setup_memfuncTrack);
   G__tagtable_setup(G__get_linked_tagnum(&G__EventDictLN_EventHeader),sizeof(EventHeader),-1,263424,"Event Header",G__setup_memvarEventHeader,G__setup_memfuncEventHeader);
   G__tagtable_setup(G__get_linked_tagnum(&G__EventDictLN_Event),sizeof(Event),-1,292096,"Event structure",G__setup_memvarEvent,G__setup_memfuncEvent);
   G__tagtable_setup(G__get_linked_tagnum(&G__EventDictLN_HistogramManager),sizeof(HistogramManager),-1,295936,"Manages all histograms",G__setup_memvarHistogramManager,G__setup_memfuncHistogramManager);
}
extern "C" void G__cpp_setupEventDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupEventDict()");
  G__set_cpp_environmentEventDict();
  G__cpp_setup_tagtableEventDict();

  G__cpp_setup_inheritanceEventDict();

  G__cpp_setup_typetableEventDict();

  G__cpp_setup_memvarEventDict();

  G__cpp_setup_memfuncEventDict();
  G__cpp_setup_globalEventDict();
  G__cpp_setup_funcEventDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncEventDict();
  return;
}
class G__cpp_setup_initEventDict {
  public:
    G__cpp_setup_initEventDict() { G__add_setup_func("EventDict",(G__incsetup)(&G__cpp_setupEventDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initEventDict() { G__remove_setup_func("EventDict"); }
};
G__cpp_setup_initEventDict G__cpp_setup_initializerEventDict;

