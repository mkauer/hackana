//
// File generated by rootcint at Thu Apr 23 11:10:45 2009

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "TetrisDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void Tetris_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_Tetris(void *p = 0);
   static void *newArray_Tetris(Long_t size, void *p);
   static void delete_Tetris(void *p);
   static void deleteArray_Tetris(void *p);
   static void destruct_Tetris(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Tetris*)
   {
      ::Tetris *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Tetris >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Tetris", ::Tetris::Class_Version(), "Tetris.h", 354,
                  typeid(::Tetris), DefineBehavior(ptr, ptr),
                  &::Tetris::Dictionary, isa_proxy, 0,
                  sizeof(::Tetris) );
      instance.SetNew(&new_Tetris);
      instance.SetNewArray(&newArray_Tetris);
      instance.SetDelete(&delete_Tetris);
      instance.SetDeleteArray(&deleteArray_Tetris);
      instance.SetDestructor(&destruct_Tetris);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Tetris*)
   {
      return GenerateInitInstanceLocal((::Tetris*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Tetris*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *Tetris::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Tetris::Class_Name()
{
   return "Tetris";
}

//______________________________________________________________________________
const char *Tetris::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Tetris*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Tetris::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Tetris*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Tetris::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Tetris*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Tetris::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Tetris*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void Tetris::Streamer(TBuffer &R__b)
{
   // Stream an object of class Tetris.

   TCanvas::Streamer(R__b);
}

//______________________________________________________________________________
void Tetris::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class Tetris.
      TClass *R__cl = ::Tetris::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fCurrentPiece", &fCurrentPiece);
      R__insp.Inspect(R__cl, R__parent, "*fBoard", &fBoard);
      R__insp.Inspect(R__cl, R__parent, "*fNextPiece", &fNextPiece);
      R__insp.Inspect(R__cl, R__parent, "*fLinesRemoved", &fLinesRemoved);
      R__insp.Inspect(R__cl, R__parent, "*fLevel", &fLevel);
      R__insp.Inspect(R__cl, R__parent, "*fScore", &fScore);
      R__insp.Inspect(R__cl, R__parent, "*fNewGame", &fNewGame);
      R__insp.Inspect(R__cl, R__parent, "*fQuit", &fQuit);
      R__insp.Inspect(R__cl, R__parent, "*fPause", &fPause);
      R__insp.Inspect(R__cl, R__parent, "*fKeyHandler", &fKeyHandler);
      R__insp.Inspect(R__cl, R__parent, "fPiecesDropped", &fPiecesDropped);
      R__insp.Inspect(R__cl, R__parent, "*fUpdateLevelTimer", &fUpdateLevelTimer);
      TCanvas::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Tetris(void *p) {
      return  p ? new(p) ::Tetris : new ::Tetris;
   }
   static void *newArray_Tetris(Long_t nElements, void *p) {
      return p ? new(p) ::Tetris[nElements] : new ::Tetris[nElements];
   }
   // Wrapper around operator delete
   static void delete_Tetris(void *p) {
      delete ((::Tetris*)p);
   }
   static void deleteArray_Tetris(void *p) {
      delete [] ((::Tetris*)p);
   }
   static void destruct_Tetris(void *p) {
      typedef ::Tetris current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Tetris

/********************************************************
* TetrisDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && (__GNUC__ > 3) && (__GNUC_MINOR__ > 1)
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableTetrisDict();

extern "C" void G__set_cpp_environmentTetrisDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("Tetris.h");
  G__cpp_reset_tagtableTetrisDict();
}
#include <new>
extern "C" int G__cpp_dllrevTetrisDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Tetris */
static int G__TetrisDict_335_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Tetris* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Tetris[n];
     } else {
       p = new((void*) gvp) Tetris[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Tetris;
     } else {
       p = new((void*) gvp) Tetris;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TetrisDictLN_Tetris));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TetrisDict_335_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Tetris*) G__getstructoffset())->GetLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TetrisDict_335_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Tetris*) G__getstructoffset())->GetLinesRemoved());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TetrisDict_335_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Tetris*) G__getstructoffset())->GetPiecesDropped());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TetrisDict_335_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Tetris*) G__getstructoffset())->GetScore());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TetrisDict_335_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Tetris*) G__getstructoffset())->IsGameOn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TetrisDict_335_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Tetris*) G__getstructoffset())->IsPaused());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TetrisDict_335_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Tetris*) G__getstructoffset())->IsWaiting());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TetrisDict_335_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Tetris*) G__getstructoffset())->SetLevel((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TetrisDict_335_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Tetris*) G__getstructoffset())->Quit();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TetrisDict_335_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Tetris*) G__getstructoffset())->Pause();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TetrisDict_335_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Tetris*) G__getstructoffset())->Continue();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TetrisDict_335_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Tetris*) G__getstructoffset())->NewGame();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TetrisDict_335_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Tetris*) G__getstructoffset())->StopGame();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TetrisDict_335_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Tetris::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TetrisDict_335_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Tetris::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TetrisDict_335_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Tetris::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TetrisDict_335_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Tetris::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TetrisDict_335_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Tetris*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TetrisDict_335_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Tetris::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TetrisDict_335_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Tetris::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TetrisDict_335_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Tetris::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TetrisDict_335_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Tetris::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Tetris G__TTetris;
static int G__TetrisDict_335_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Tetris*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Tetris*) (soff+(sizeof(Tetris)*i)))->~G__TTetris();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Tetris*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Tetris*) (soff))->~G__TTetris();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Tetris */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncTetrisDict {
 public:
  G__Sizep2memfuncTetrisDict(): p(&G__Sizep2memfuncTetrisDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncTetrisDict::*p)();
};

size_t G__get_sizep2memfuncTetrisDict()
{
  G__Sizep2memfuncTetrisDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceTetrisDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TetrisDictLN_Tetris))) {
     Tetris *G__Lderived;
     G__Lderived=(Tetris*)0x1000;
     {
       TCanvas *G__Lpbase=(TCanvas*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TetrisDictLN_Tetris),G__get_linked_tagnum(&G__TetrisDictLN_TCanvas),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TPad *G__Lpbase=(TPad*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TetrisDictLN_Tetris),G__get_linked_tagnum(&G__TetrisDictLN_TPad),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TVirtualPad *G__Lpbase=(TVirtualPad*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TetrisDictLN_Tetris),G__get_linked_tagnum(&G__TetrisDictLN_TVirtualPad),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TetrisDictLN_Tetris),G__get_linked_tagnum(&G__TetrisDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TetrisDictLN_Tetris),G__get_linked_tagnum(&G__TetrisDictLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TetrisDictLN_Tetris),G__get_linked_tagnum(&G__TetrisDictLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttPad *G__Lpbase=(TAttPad*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TetrisDictLN_Tetris),G__get_linked_tagnum(&G__TetrisDictLN_TAttPad),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TQObject *G__Lpbase=(TQObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TetrisDictLN_Tetris),G__get_linked_tagnum(&G__TetrisDictLN_TQObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableTetrisDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__TetrisDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TetrisDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TetrisDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TetrisDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TetrisDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__TetrisDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__TetrisDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__TetrisDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__TetrisDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__TetrisDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__TetrisDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__TetrisDictLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TetrisDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TetrisDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TetrisDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TetrisDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Tetris */
static void G__setup_memvarTetris(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TetrisDictLN_Tetris));
   { Tetris *p; p=(Tetris*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TetrisDictLN_CurrentPiece),-1,-1,4,"fCurrentPiece=",0,"live tetris piece");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TetrisDictLN_TetrisBoard),-1,-1,4,"fBoard=",0,"pad were everything is going on");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TetrisDictLN_NextPiecePad),-1,-1,4,"fNextPiece=",0,"pad which show next piece");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TetrisDictLN_InfoPad),-1,-1,4,"fLinesRemoved=",0,"number of removed lines");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TetrisDictLN_InfoPad),-1,-1,4,"fLevel=",0,"game level");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TetrisDictLN_InfoPad),-1,-1,4,"fScore=",0,"game score");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TetrisDictLN_NewGameButton),-1,-1,4,"fNewGame=",0,"clicking on button initiates new game");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TetrisDictLN_QuitButton),-1,-1,4,"fQuit=",0,"clicking on button makes game over");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TetrisDictLN_PauseButton),-1,-1,4,"fPause=",0,"pause/continue button");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TetrisDictLN_KeyHandler),-1,-1,4,"fKeyHandler=",0,"handler for arrow keys");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPiecesDropped=",0,"number of pieces dropped");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TetrisDictLN_UpdateLevelTimer),-1,-1,4,"fUpdateLevelTimer=",0,"periodically updates game level");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TetrisDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarTetrisDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTetris(void) {
   /* Tetris */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TetrisDictLN_Tetris));
   G__memfunc_setup("SetFixedSize",1207,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateNewPiece",1380,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdatePiecesDropped",1930,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateLinesRemoved",1840,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateScore",1119,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - add_value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateLevel",1115,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintHelpInfo",1314,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MoveLeft",802,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MoveRight",917,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DropDown",813,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RotateRight",1133,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RotateLeft",1018,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Tetris",635,G__TetrisDict_335_0_13, 105, G__get_linked_tagnum(&G__TetrisDictLN_Tetris), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLevel",792,G__TetrisDict_335_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLinesRemoved",1517,G__TetrisDict_335_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPiecesDropped",1607,G__TetrisDict_335_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetScore",796,G__TetrisDict_335_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsGameOn",755,G__TetrisDict_335_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsPaused",798,G__TetrisDict_335_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsWaiting",911,G__TetrisDict_335_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLevel",804,G__TetrisDict_335_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Quit",419,G__TetrisDict_335_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Pause",510,G__TetrisDict_335_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Continue",837,G__TetrisDict_335_0_24, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewGame",676,G__TetrisDict_335_0_25, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StopGame",800,G__TetrisDict_335_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TetrisDict_335_0_27, 85, G__get_linked_tagnum(&G__TetrisDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Tetris::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TetrisDict_335_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Tetris::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TetrisDict_335_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Tetris::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TetrisDict_335_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Tetris::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TetrisDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TetrisDict_335_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TetrisDict_335_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Tetris::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TetrisDict_335_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Tetris::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TetrisDict_335_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Tetris::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TetrisDict_335_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Tetris::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~Tetris", 761, G__TetrisDict_335_0_39, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncTetrisDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {
}

static void G__cpp_setup_global6() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalTetrisDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
  G__cpp_setup_global6();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcTetrisDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__TetrisDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__TetrisDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__TetrisDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__TetrisDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__TetrisDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__TetrisDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__TetrisDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TetrisDictLN_TQObject = { "TQObject" , 99 , -1 };
G__linked_taginfo G__TetrisDictLN_TAttPad = { "TAttPad" , 99 , -1 };
G__linked_taginfo G__TetrisDictLN_TAttLine = { "TAttLine" , 99 , -1 };
G__linked_taginfo G__TetrisDictLN_TAttFill = { "TAttFill" , 99 , -1 };
G__linked_taginfo G__TetrisDictLN_TCanvas = { "TCanvas" , 99 , -1 };
G__linked_taginfo G__TetrisDictLN_TVirtualPad = { "TVirtualPad" , 99 , -1 };
G__linked_taginfo G__TetrisDictLN_TPad = { "TPad" , 99 , -1 };
G__linked_taginfo G__TetrisDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__TetrisDictLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__TetrisDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TetrisDictLN_Tetris = { "Tetris" , 99 , -1 };
G__linked_taginfo G__TetrisDictLN_TetrisBoard = { "TetrisBoard" , 99 , -1 };
G__linked_taginfo G__TetrisDictLN_CurrentPiece = { "CurrentPiece" , 99 , -1 };
G__linked_taginfo G__TetrisDictLN_NextPiecePad = { "NextPiecePad" , 99 , -1 };
G__linked_taginfo G__TetrisDictLN_QuitButton = { "QuitButton" , 99 , -1 };
G__linked_taginfo G__TetrisDictLN_PauseButton = { "PauseButton" , 99 , -1 };
G__linked_taginfo G__TetrisDictLN_NewGameButton = { "NewGameButton" , 99 , -1 };
G__linked_taginfo G__TetrisDictLN_InfoPad = { "InfoPad" , 99 , -1 };
G__linked_taginfo G__TetrisDictLN_KeyHandler = { "KeyHandler" , 99 , -1 };
G__linked_taginfo G__TetrisDictLN_UpdateLevelTimer = { "UpdateLevelTimer" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableTetrisDict() {
  G__TetrisDictLN_TClass.tagnum = -1 ;
  G__TetrisDictLN_TBuffer.tagnum = -1 ;
  G__TetrisDictLN_TMemberInspector.tagnum = -1 ;
  G__TetrisDictLN_TObject.tagnum = -1 ;
  G__TetrisDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__TetrisDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__TetrisDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TetrisDictLN_TQObject.tagnum = -1 ;
  G__TetrisDictLN_TAttPad.tagnum = -1 ;
  G__TetrisDictLN_TAttLine.tagnum = -1 ;
  G__TetrisDictLN_TAttFill.tagnum = -1 ;
  G__TetrisDictLN_TCanvas.tagnum = -1 ;
  G__TetrisDictLN_TVirtualPad.tagnum = -1 ;
  G__TetrisDictLN_TPad.tagnum = -1 ;
  G__TetrisDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__TetrisDictLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__TetrisDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TetrisDictLN_Tetris.tagnum = -1 ;
  G__TetrisDictLN_TetrisBoard.tagnum = -1 ;
  G__TetrisDictLN_CurrentPiece.tagnum = -1 ;
  G__TetrisDictLN_NextPiecePad.tagnum = -1 ;
  G__TetrisDictLN_QuitButton.tagnum = -1 ;
  G__TetrisDictLN_PauseButton.tagnum = -1 ;
  G__TetrisDictLN_NewGameButton.tagnum = -1 ;
  G__TetrisDictLN_InfoPad.tagnum = -1 ;
  G__TetrisDictLN_KeyHandler.tagnum = -1 ;
  G__TetrisDictLN_UpdateLevelTimer.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableTetrisDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__TetrisDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__TetrisDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__TetrisDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__TetrisDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__TetrisDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__TetrisDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__TetrisDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TetrisDictLN_TQObject);
   G__get_linked_tagnum_fwd(&G__TetrisDictLN_TAttPad);
   G__get_linked_tagnum_fwd(&G__TetrisDictLN_TAttLine);
   G__get_linked_tagnum_fwd(&G__TetrisDictLN_TAttFill);
   G__get_linked_tagnum_fwd(&G__TetrisDictLN_TCanvas);
   G__get_linked_tagnum_fwd(&G__TetrisDictLN_TVirtualPad);
   G__get_linked_tagnum_fwd(&G__TetrisDictLN_TPad);
   G__get_linked_tagnum_fwd(&G__TetrisDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__TetrisDictLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__TetrisDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__TetrisDictLN_Tetris),sizeof(Tetris),-1,62720,"ROOT implementation of the Tetris game",G__setup_memvarTetris,G__setup_memfuncTetris);
   G__get_linked_tagnum_fwd(&G__TetrisDictLN_TetrisBoard);
   G__get_linked_tagnum_fwd(&G__TetrisDictLN_CurrentPiece);
   G__get_linked_tagnum_fwd(&G__TetrisDictLN_NextPiecePad);
   G__get_linked_tagnum_fwd(&G__TetrisDictLN_QuitButton);
   G__get_linked_tagnum_fwd(&G__TetrisDictLN_PauseButton);
   G__get_linked_tagnum_fwd(&G__TetrisDictLN_NewGameButton);
   G__get_linked_tagnum_fwd(&G__TetrisDictLN_InfoPad);
   G__get_linked_tagnum_fwd(&G__TetrisDictLN_KeyHandler);
   G__get_linked_tagnum_fwd(&G__TetrisDictLN_UpdateLevelTimer);
}
extern "C" void G__cpp_setupTetrisDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupTetrisDict()");
  G__set_cpp_environmentTetrisDict();
  G__cpp_setup_tagtableTetrisDict();

  G__cpp_setup_inheritanceTetrisDict();

  G__cpp_setup_typetableTetrisDict();

  G__cpp_setup_memvarTetrisDict();

  G__cpp_setup_memfuncTetrisDict();
  G__cpp_setup_globalTetrisDict();
  G__cpp_setup_funcTetrisDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncTetrisDict();
  return;
}
class G__cpp_setup_initTetrisDict {
  public:
    G__cpp_setup_initTetrisDict() { G__add_setup_func("TetrisDict",(G__incsetup)(&G__cpp_setupTetrisDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initTetrisDict() { G__remove_setup_func("TetrisDict"); }
};
G__cpp_setup_initTetrisDict G__cpp_setup_initializerTetrisDict;

